"filetype off
if has('vim_starting')
  set nocompatible
  execute "set runtimepath+=" . g:vim_home . "bundle/neobundle.vim"
endif

call neobundle#begin(g:vim_home . 'bundle')
NeoBundleFetch 'Shougo/neobundle.vim'
call neobundle#end()

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'Shougo/neocomplete'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimshell'
"NeoBundle 'Shougo/echodoc'
"NeoBundle 'Shougo/vim-vcs'
"NeoBundle 'Shougo/vimfiler'
"NeoBundle 'Shougo/vinarise'

"NeoBundle 'vim-scripts/taglist.vim'
"NeoBundle 'vim-scripts/vimwiki'

"NeoBundle 'thinca/vim-ref'
"NeoBundle 'thinca/vim-quickrun'

NeoBundle 'mattn/emmet-vim'

if executable('ag')
  NeoBundle 'rking/ag.vim'
endif

""" syntax
NeoBundle 'jsx/jsx.vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'statianzo/vim-jade'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'lukaszkorecki/CoffeeTags'

""" Vim as your IDE [http://haridas.in/vim-as-your-ide.html]
"NeoBundle 'git://git.wincent.com/command-t'
NeoBundle 'fholgado/minibufexpl.vim'
"NeoBundle 'klen/rope-vim'
NeoBundle 'majutsushi/tagbar'
"NeoBundle 'msanders/snipmate.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'scrooloose/syntastic'
"NeoBundle 'vim-scripts/simple-pairs'

"" git
NeoBundle 'tpope/vim-fugitive'

"" status line
NeoBundle 'bling/vim-airline'
"NeoBundle 'itchyny/lightline.vim'

"" colorscheme
"NeoBundle 'altercation/vim-colors-solarized'

NeoBundle 'editorconfig/editorconfig-vim'

NeoBundle 'osyo-manga/vim-over'

NeoBundle 'slim-template/vim-slim'

NeoBundle 'haya14busa/incsearch.vim'

NeoBundleCheck

filetype plugin indent on
""2}}}

"" nerdtree.vim {{{2
nnoremap <C-n> :NERDTreeToggle<CR>
""2}}}
"" minibufexpl.vim {{{2
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
""2}}}
"" rope.vim {{{2
"imap <leader>j <ESC>:RopeGotoDefinition<CR>
"nmap <leader>j <ESC>:RopeGotoDefinition<CR>
"2}}}
"" tagbar.vim {{{2
nmap <leader>l <ESC>:TagbarToggle<CR>
imap <leader>l <ESC>:TagbarToggle<CR>i
"" 2}}}
"" neocomplcache.vim {{{2
"let g:acp_enableAtStartup = 0
"let g:neocomplcache_enable_at_startup = 1
"let g:neocomplcache_enable_smart_case = 1
"let g:neocomplcache_enable_camel_case_completion = 0
"let g:neocomplcache_enable_underbar_completion = 1
"let g:neocomplcache_min_syntax_length = 3
""let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
"
"""" Define keyword.
"if !exists('g:neocomplcache_keyword_patterns')
"  let g:neocomplcache_keyword_patterns = {}
"endif
"let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
"
"""" Plugin key-mappings.
"imap <C-k> <Plug>(neocomplcache_snippets_expand)
"smap <C-k> <Plug>(neocomplcache_snippets_expand)
"inoremap <expr><C-g>     neocomplcache#undo_completion()
"inoremap <expr><C-l>     neocomplcache#complete_common_string()
"
"""" SuperTab like snippets behavior.
""imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"
"
"""" Recommended key-mappings.
"""" <CR>: close popup and save indent.
"inoremap <expr><CR>   neocomplcache#smart_close_popup() . "\<CR>"
"""" <TAB>: completion.
"""" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"""" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h>  neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS>   neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplcache#close_popup()
"inoremap <expr><C-e>  neocomplcache#cancel_popup()
"
"""" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1
"
"""" Shell like behavior(not recommended).
""set completeopt+=longest
""let g:neocomplcache_enable_auto_select = 1
""let g:neocomplcache_disable_auto_complete = 1
""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
""inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
"
"""" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd FileType perl setlocal omnifunc=perlcomplete#CompleteTags
""autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"
"" Enable heavy omni completion.
"if !exists('g:neocomplcache_omni_patterns')
"  let g:neocomplcache_omni_patterns = {}
"endif
""let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
""autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
"2}}}
"" neocomplete.vim {{{2
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : g:vim_home . '.vimshell_hist',
    \ 'scheme' : g:vim_home . '/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
""2}}

"" neosnippet {{{2
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

let g:neosnippet#snippets_directory=g:vim_home . 'snippets'

""2}}}
"" unite.vim {{{2
if executable('ag')
  let g:unite_source_rec_async_command = 'ag --nocolor --nogroup --hidden -g ""'
endif
nnoremap <leader>h :<C-u>Unite -start-insert file_mru<CR>
nnoremap <leader>f :<C-u>Unite -start-insert file_rec/async:!<CR>
nnoremap <leader>F :<C-u>Unite -start-insert file_rec<CR>
""2}}}
"" taglist.vim {{{2
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'
"" 2}}}
"" coffeetags {{{2
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif
"" }}}2
"" over.vim {{{2
nnoremap <silent> <Leader>m :OverCommandLine<CR>
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
"" }}}2
" incsearch.vim {{{2
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
""" }}}2

" vim: foldmethod=marker foldcolumn=3 foldlevel=0 :
