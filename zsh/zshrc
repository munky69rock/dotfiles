# LANG
export LANG="ja_JP.UTF-8"
export LC_ALL=$LANG

export HOST=`hostname`
export EDITOR=/usr/local/bin/vim

autoload colors
colors
PROMPT="%{${fg[white]}%}[%n@%m:%~]%#%{${reset_color}%} "
PROMPT2="%{${fg[white]}%}%_%#%{${reset_color}%} "
SPROMPT="%{${fg[white]}%}%r is correct? [n,y,a,e]:%{${reset_color}%} "
#[ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
#	PROMPT="%{${fg[white]}%}${HOST%%.*} ${PROMPT}"

# http://qiita.com/items/8d5a627d773758dd8078?utm_source=Qiita+Newsletter+Users&utm_campaign=bff63624dd-Qiita_newsletter_31_19_12_2012&utm_medium=email
# vcs_info 設定

RPROMPT=""

autoload -Uz vcs_info
autoload -Uz add-zsh-hook
autoload -Uz is-at-least
autoload -Uz colors

# 以下の3つのメッセージをエクスポートする
#   $vcs_info_msg_0_ : 通常メッセージ用 (緑)
#   $vcs_info_msg_1_ : 警告メッセージ用 (黄色)
#   $vcs_info_msg_2_ : エラーメッセージ用 (赤)
zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable git svn hg bzr
# 標準のフォーマット(git 以外で使用)
# misc(%m) は通常は空文字列に置き換えられる
zstyle ':vcs_info:*' formats '(%s)-[%b]'
zstyle ':vcs_info:*' actionformats '(%s)-[%b]' '%m' '<!%a>'
zstyle ':vcs_info:(svn|bzr):*' branchformat '%b:r%r'
zstyle ':vcs_info:bzr:*' use-simple true


if is-at-least 4.3.10; then
  # git 用のフォーマット
  # git のときはステージしているかどうかを表示
  zstyle ':vcs_info:git:*' formats '(%s)-[%b]' '%c%u %m'
  zstyle ':vcs_info:git:*' actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
  zstyle ':vcs_info:git:*' check-for-changes true
  zstyle ':vcs_info:git:*' stagedstr "+"  # %c で表示する文字列
  zstyle ':vcs_info:git:*' unstagedstr "-"  # %u で表示する文字列
fi

# hooks 設定
if is-at-least 4.3.11; then
  # git のときはフック関数を設定する

  # formats '(%s)-[%b]' '%c%u %m' , actionformats '(%s)-[%b]' '%c%u %m' '<!%a>'
  # のメッセージを設定する直前のフック関数
  # 今回の設定の場合はformat の時は2つ, actionformats の時は3つメッセージがあるので
  # 各関数が最大3回呼び出される。
  zstyle ':vcs_info:git+set-message:*' hooks \
                                       git-hook-begin \
                                       git-untracked \
                                       git-push-status \
                                       git-nomerge-branch \
                                       git-stash-count

  # フックの最初の関数
  # git の作業コピーのあるディレクトリのみフック関数を呼び出すようにする
  # (.git ディレクトリ内にいるときは呼び出さない)
  # .git ディレクトリ内では git status --porcelain などがエラーになるため
  function +vi-git-hook-begin() {
    if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
      # 0以外を返すとそれ以降のフック関数は呼び出されない
      return 1
    fi

    return 0
  }

  # untracked フィアル表示
  #
  # untracked ファイル(バージョン管理されていないファイル)がある場合は
  # unstaged (%u) に ? を表示
  function +vi-git-untracked() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    if command git status --porcelain 2> /dev/null \
      | awk '{print $1}' \
      | command grep -F '??' > /dev/null 2>&1 ; then

      # unstaged (%u) に追加
      hook_com[unstaged]+='?'
    fi
  }

  # push していないコミットの件数表示
  #
  # リモートリポジトリに push していないコミットの件数を
  # pN という形式で misc (%m) に表示する
  function +vi-git-push-status() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    if [[ "${hook_com[branch]}" != "master" ]]; then
      # master ブランチでない場合は何もしない
      return 0
    fi

    # push していないコミット数を取得する
    local ahead
    ahead=$(command git rev-list origin/master..master 2>/dev/null \
      | wc -l \
      | tr -d ' ')

    if [[ "$ahead" -gt 0 ]]; then
      # misc (%m) に追加
      hook_com[misc]+="(p${ahead})"
    fi
  }

  # マージしていない件数表示
  #
  # master 以外のブランチにいる場合に、
  # 現在のブランチ上でまだ master にマージしていないコミットの件数を
  # (mN) という形式で misc (%m) に表示
  function +vi-git-nomerge-branch() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    if [[ "${hook_com[branch]}" == "master" ]]; then
      # master ブランチの場合は何もしない
      return 0
    fi

    local nomerged
    nomerged=$(command git rev-list master..${hook_com[branch]} 2>/dev/null | wc -l | tr -d ' ')

    if [[ "$nomerged" -gt 0 ]] ; then
      # misc (%m) に追加
      hook_com[misc]+="(m${nomerged})"
    fi
  }


  # stash 件数表示
  #
  # stash している場合は :SN という形式で misc (%m) に表示
  function +vi-git-stash-count() {
    # zstyle formats, actionformats の2番目のメッセージのみ対象にする
    if [[ "$1" != "1" ]]; then
      return 0
    fi

    local stash
    stash=$(command git stash list 2>/dev/null | wc -l | tr -d ' ')
    if [[ "${stash}" -gt 0 ]]; then
      # misc (%m) に追加
      hook_com[misc]+=":S${stash}"
    fi
  }

fi

function _update_vcs_info_msg() {
  local -a messages
  local prompt

  LANG=en_US.UTF-8 vcs_info

  if [[ -z ${vcs_info_msg_0_} ]]; then
    # vcs_info で何も取得していない場合はプロンプトを表示しない
    prompt=""
  else
    # vcs_info で情報を取得した場合
    # $vcs_info_msg_0_ , $vcs_info_msg_1_ , $vcs_info_msg_2_ を
    # それぞれ緑、黄色、赤で表示する
    [[ -n "$vcs_info_msg_0_" ]] && messages+=( "%F{green}${vcs_info_msg_0_}%f" )
    [[ -n "$vcs_info_msg_1_" ]] && messages+=( "%F{yellow}${vcs_info_msg_1_}%f" )
    [[ -n "$vcs_info_msg_2_" ]] && messages+=( "%F{red}${vcs_info_msg_2_}%f" )

    # 間にスペースを入れて連結する
    prompt="${(j: :)messages}"
  fi

  RPROMPT="$prompt"
}
add-zsh-hook precmd _update_vcs_info_msg

export PROMPT_EOL_MARK=""
setopt auto_cd
setopt auto_pushd
setopt correct
setopt list_packed
setopt noautoremoveslash
setopt nolistbeep
bindkey -e # emacs

autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_all_dups # ignore duplication command history list
setopt hist_reduce_blanks # ignore command spaces
setopt share_history # share command history data

autoload -U compinit
compinit
setopt complete_aliases # aliased ls needs if file/dir completions work

case "${OSTYPE}" in
freebsd*|darwin*)
  alias ls="ls -G -w"
  ;;
linux*|cygwin*)
  alias ls="ls --color"
  ;;
esac

unset LSCOLORS
case "${TERM}" in
xterm)
  export TERM=xterm-color
  ;;
kterm)
  export TERM=kterm-color
  # set BackSpace control character
  stty erase
  ;;
cons25)
  unset LANG
  export LSCOLORS=ExFxCxdxBxegedabagacad
  export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30'
  zstyle ':completion:*' list-colors \
    'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
  ;;
esac

# set terminal title including current directory
case "${TERM}" in
kterm*|xterm*)
  #precmd() {
  #  echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
  #}
  export LSCOLORS=exfxcxdxbxegedabagacad
  export LS_COLORS='di=01;34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30'
  zstyle ':completion:*' list-colors \
    'di=01;34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
  ;;
esac

## load user .zshrc configuration file
[ -f $HOME/.zshrc.local ] && source $HOME/.zshrc.local
[ -f $HOME/.aliases ] && source $HOME/.aliases
[ -s $HOME/.perlbrew/perl5/etc/bashrc ] && source $HOME/.perlbrew/perl5/etc/bashrc
[ -s $HOME/.pythonbrew/etc/bashrc ] && source $HOME/.pythonbrew/etc/bashrc

# for nave
[ "$NAVE_LOGIN" = "1" ] && export PATH=$NAVEPATH:$npm_config_prefix/lib/node_modules:$PATH
