" VIMRC

" GENERAL SETTINGS: {{{1

syntax on
set shell=/bin/sh
set nocompatible
set modeline
"set modelines=0
set whichwrap=b,s,h,l,<,>,[,]
set hidden
set swapfile
set directory=$HOME/git/dotfiles/vim/swp
set backupskip=/tmp/*,/private/tmp/*
set history=10000
set viminfo='100,<50,s10,h,:5000,/5000,n$HOME/.viminfo
set ttyfast
set lazyredraw

"" user interface
set background=dark
set title
set ruler
set number
set showcmd
set showmode
set matchtime=2
set hidden
set shortmess+=I
"set statusline==%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%{fugitive#statusline()}%=%l,%c%V%8P
set wrap
set textwidth=0
set laststatus=2
set backspace=indent,eol,start
if has("autocmd")
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
endif
set scrolloff=3

"" Wildmenu completion
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"
highlight SpecialKey term=underline ctermfg=darkgray guifg=darkgray
highlight Pmenu ctermbg=4
highlight PmenuSel ctermbg=1
highlight PmenuSbar ctermbg=0
set completeopt=menuone,longest,preview
if has('win32') || has('win64')
  "" TODO 
else
  set listchars=tab:▸.,trail:_,eol:↲,extends:>,precedes:<,nbsp:%
endif

"" indent
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set nosmartindent
set pastetoggle=<F3>

"" search
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch

"" zenkakuspace highlight
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

"" auto save
"autocmd FocusLost * :wa

"" Working with split screen nicely
"" Resize Split When the window is resized
autocmd VimResized * :wincmd =

" ENCODING: {{{1
if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  unlet s:enc_euc
  unlet s:enc_jis
endif
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
set fileformats=unix,dos,mac
if exists('&ambiwidth')
  set ambiwidth=double
endif

" SPECIFY FILETYPE: {{{1
autocmd BufNewFile,BufRead *.psgi                   setl ft=perl
autocmd BufNewFile,BufRead *.tt                     setl ft=html
autocmd BufNewFile,BufRead httpd.conf*,rewrite*conf setl ft=apache
autocmd BufNewFile,BufRead *.scss                   setl ft=scss
autocmd BufNewFile,BufRead *.sass                   setl ft=sass
autocmd BufNewFile,BufRead *.jade                   setl ft=jade
autocmd BufNewFile,BufRead *.coffee,Cakefile        setl ft=coffeescript
autocmd BufNewFile,BufRead *.as                     setl ft=actionscript
autocmd BufNewFile,BufRead *.go                     setl ft=go
autocmd BufNewFile,BufRead *.tsv,*.csv              setl fenc=cp932 ff=dos

" KEY MAPPING: {{{1
nmap <ESC><ESC> :nohlsearch<CR><ESC>
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

noremap <Space>h ^
noremap <Space>l $
noremap <Space>/ *

"nnoremap <PageDown> <C-F>
"nnoremap <PageUp> <C-B>

nmap ,b :ls<CR>:buf 
nmap ,e :e!<CR>
nmap ,c :call SyntaxCheck()<CR>
function SyntaxCheck()
  execute ':w'
  if &syntax == 'perl'
    execute ':!perl -cw %'
  elseif &syntax == 'ruby'
    execute ':!ruby -cW %'
  elseif &syntax == 'javascript'
    execute ':!jslint %'
  elseif &syntax == 'coffee'
    execute ':!coffee -c %'
  endif
endf
autocmd FileType perl nmap ,w :!perl -wc %<CR>
autocmd FileType perl nmap ,d :!perl %<CR>


" PLUGINS: {{{1

"" unify vim plugin path to ~/.vim
if has('win32') || has('win64')
  set runtimepath+=$HOME/.vim
endif

let mapleader = ","

"" neobundle.vim {{{2
set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=$HOME/git/dotfiles/vim/neobundle.vim

  call neobundle#rc(expand('$HOME/git/dotfiles/vim/bundle'))
endif

NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neobundle.vim'
"NeoBundle 'Shougo/unite.vim'
"NeoBundle 'Shougo/echodoc'
"NeoBundle 'Shougo/vim-vcs'
"NeoBundle 'Shougo/vimfiler'
"NeoBundle 'Shougo/vimshell'
"NeoBundle 'Shougo/vinarise'

"NeoBundle 'vim-scripts/taglist.vim'
"NeoBundle 'vim-scripts/vimwiki'

"NeoBundle 'thinca/vim-ref'
"NeoBundle 'thinca/vim-quickrun'

NeoBundle 'mattn/zencoding-vim'

NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'lukaszkorecki/CoffeeTags'

""" syntax
NeoBundle 'jsx/jsx.vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'statianzo/vim-jade'

"NeoBundle 'othree/eregex.vim'
"NeoBundle 'vim-scripts/Align.vim'

""" Vim as your IDE [http://haridas.in/vim-as-your-ide.html]
"NeoBundle 'git://git.wincent.com/command-t'
NeoBundle 'fholgado/minibufexpl.vim'
"NeoBundle 'klen/rope-vim'
NeoBundle 'majutsushi/tagbar'
"NeoBundle 'msanders/snipmate.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'scrooloose/syntastic'
"NeoBundle 'tpope/vim-fugitive'
"NeoBundle 'vim-scripts/simple-pairs'

"NeoBundle 'vim-scripts/Smooth-Scroll' (incompatible with zen-coding.vim)

" git
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'bling/vim-airline'
"NeoBundle 'itchyny/lightline.vim'

NeoBundleCheck

filetype plugin on
filetype indent on

"" nerdtree.vim {{{2
nnoremap <C-n> :NERDTreeToggle<CR>

"" minibufexpl.vim {{{2
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

"" rope.vim {{{2
"imap <leader>j <ESC>:RopeGotoDefinition<CR>
"nmap <leader>j <ESC>:RopeGotoDefinition<CR>

"" tagbar.vim {{{2
nmap <leader>l <ESC>:TagbarToggle<CR>
imap <leader>l <ESC>:TagbarToggle<CR>i

"" neocomplcache.vim {{{2
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 0
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3
"let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

""" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

""" Plugin key-mappings.
imap <C-k> <Plug>(neocomplcache_snippets_expand)
smap <C-k> <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

""" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

""" Recommended key-mappings.
""" <CR>: close popup and save indent.
inoremap <expr><CR>   neocomplcache#smart_close_popup() . "\<CR>"
""" <TAB>: completion.
""" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
""" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h>  neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS>   neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

""" AutoComplPop like behavior.
let g:neocomplcache_enable_auto_select = 1

""" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

""" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType perl setlocal omnifunc=perlcomplete#CompleteTags
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
"let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
"autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

"" neosnippet {{{2
let g:neosnippet#snippets_directory='$HOME/.vim/bundle/neosnippet/autoload/neosnippet/snippets,$HOME/.vim/snippets'

"""" unite.vim {{{2
""let g:unite_enable_start_insert=1
""noremap <C-P> :Unite buffer<CR>
"""noremap <C-N> :Unite -buffer-name=file file<CR>
""noremap <C-Z> :Unite file_mru<CR>
""autocmd FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
""autocmd FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
""autocmd FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
""autocmd FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
""autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
""autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
""autocmd FileType unite call s:unite_my_settings()
""function! s:unite_my_settings()
""  """ Overwrite settings.
""endfunction
""call unite#set_substitute_pattern('file', '\$\w\+', '\=eval(submatch(0))', 200)
""call unite#set_substitute_pattern('file', '^@@', '\=fnamemodify(expand("#"), ":p:h")."/"', 2)
""call unite#set_substitute_pattern('file', '^@', '\=getcwd()."/*"', 1)
""call unite#set_substitute_pattern('file', '^;r', '\=$VIMRUNTIME."/"')
""call unite#set_substitute_pattern('file', '^\~', escape($HOME, '\'), -2)
""call unite#set_substitute_pattern('file', '\\\@<! ', '\\ ', -20)
""call unite#set_substitute_pattern('file', '\\ \@!', '/', -30)
""if has('win32') || has('win64')
""  call unite#set_substitute_pattern('file', '^;p', 'C:/Program Files/')
""  call unite#set_substitute_pattern('file', '^;v', '~/vimfiles/')
""else
""  call unite#set_substitute_pattern('file', '^;v', '~/.vim/')
""endif

"" taglist.vim {{{2
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'

"" coffeetags {{{2
if executable('coffeetags')
  let g:tagbar_type_coffee = {
        \ 'ctagsbin' : 'coffeetags',
        \ 'ctagsargs' : '',
        \ 'kinds' : [
        \ 'f:functions',
        \ 'o:object',
        \ ],
        \ 'sro' : ".",
        \ 'kind2scope' : {
        \ 'f' : 'object',
        \ 'o' : 'object',
        \ }
        \ }
endif

" }}}2

" FILETYPE SETTINGS: {{{1
autocmd FileType html,xhtml,haml,jade,scss,sass,css,javascript,coffeescript setl ff=dos ts=2 sts=2 sw=2 expandtab
autocmd FileType sql    setl expandtab ts=2 sts=2 sw=2 nonu
autocmd FileType yaml   setl expandtab
autocmd FileType vim    setl noexpandtab ts=2 sts=2 sw=2 
autocmd FileType perl   setl noexpandtab ff=unix ts=4 sts=4 sw=4
autocmd FileType ruby   setl expandtab   ff=unix ts=2 sts=2 sw=2
autocmd FileType python setl expandtab   ff=unix ts=4 sts=4 sw=4
autocmd FileType sh     setl expandtab   ts=2 sts=2 sw=2
""" TODO: windows g?vimrc encoding=cp932

" LOCAL SETTINGS: {{{1
if filereadable(expand('$HOME/.vimrc.local'))
  source $HOME/.vimrc.local
endif
" }}}1

" vim: foldmethod=marker foldcolumn=3 foldlevel=0 :
