"================================================================================
" GENERAL SETTINGS:
"================================================================================

scriptencoding utf-8
syntax on
set nocompatible
"set shell=/bin/sh
set shell=bash\ -i
set modeline
"set modelines=0
set whichwrap=b,s,h,l,<,>,[,]
set hidden
set swapfile
set directory=$HOME/.vim/swp
set undodir=$HOME/.vim/undo
set backupskip=/tmp/*,/private/tmp/*
set history=10000
set viminfo='100,<50,s10,h,:5000,/5000,n$HOME/.viminfo
set ttyfast
set lazyredraw

"" user interface
set background=dark
set title
set ruler
set number
set showcmd
set showmode
set matchtime=2
set hidden
set shortmess+=I
set wrap
set textwidth=0
set laststatus=2
set backspace=indent,eol,start
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal! g'\"" |
        \ endif
endif
"set scrolloff=3

"" Wildmenu completion
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"
highlight SpecialKey term=underline ctermfg=darkgray guifg=darkgray
highlight Pmenu ctermbg=4
highlight PmenuSel ctermbg=1
highlight PmenuSbar ctermbg=0
set completeopt=menuone,longest,preview
if has('win32') || has('win64')
  "" TODO 
else
  set listchars=tab:▸.,trail:_,eol:↲,extends:>,precedes:<,nbsp:%
endif
set cursorcolumn
set cursorline

"" indent
set autoindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set nosmartindent
set pastetoggle=<F3>

"" search
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch

"" gui
set clipboard+=autoselect
set clipboard+=unnamed

"" zenkakuspace highlight
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

"" spell check
" set spell

"" auto save
"autocmd FocusLost * :wa

"" Working with split screen nicely
"" Resize Split When the window is resized
autocmd VimResized * :wincmd =


"================================================================================
" ENCODING:
"================================================================================

if &encoding !=# 'utf-8'
  set encoding=japan
  set fileencoding=japan
endif
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  unlet s:enc_euc
  unlet s:enc_jis
endif
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
set fileformats=unix,dos,mac
if exists('&ambiwidth')
  set ambiwidth=double
endif


"================================================================================
" SPECIFY FILETYPE:
"================================================================================

autocmd BufNewFile,BufRead *.psgi                   setl ft=perl
autocmd BufNewFile,BufRead *.tt,*.tx                setl ft=html
autocmd BufNewFile,BufRead httpd.conf*,rewrite*conf setl ft=apache
autocmd BufNewFile,BufRead *.scss                   setl ft=scss
autocmd BufNewFile,BufRead *.sass                   setl ft=sass
autocmd BufNewFile,BufRead *.less                   setl ft=less
autocmd BufNewFile,BufRead *.jade                   setl ft=jade
autocmd BufNewFile,BufRead *.coffee,Cakefile        setl ft=coffeescript
autocmd BufNewFile,BufRead *.as                     setl ft=actionscript
autocmd BufNewFile,BufRead *.go                     setl ft=go
autocmd BufNewFile,BufRead Podfile,Thorfile,*.thor  setl ft=ruby
"autocmd BufNewFile,BufRead *.tsv,*.csv              setl fenc=cp932 ff=dos


"================================================================================
" KEY MAPPING:
"================================================================================

let mapleader = ","

nmap <ESC><ESC> :nohlsearch<CR><ESC>
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz

noremap <Space>h ^
noremap <Space>l $
noremap <Space>/ *

"nnoremap <PageDown> <C-F>
"nnoremap <PageUp> <C-B>

nmap <leader>b :ls<CR>:buf 
nmap <leader>e :e!<CR>
nmap <leader>c :call SyntaxCheck()<CR>
if !exists("*SyntaxCheck")
  function SyntaxCheck()
    execute ':w'
    if &syntax == 'perl'
      execute ':!perl -cw %'
    elseif &syntax == 'ruby'
      execute ':!ruby -cW %'
    elseif &syntax == 'javascript'
      execute ':!jslint %'
    elseif &syntax == 'coffee'
      execute ':!coffee -c %'
    endif
  endf
endif


"================================================================================
" PLUGINS:
"================================================================================

function! SourceIfExist(path)
  if filereadable(a:path)
    execute 'source' a:path
  endif
endfunction

"" unify vim plugin path to ~/.vim
if has('win32') || has('win64')
  set runtimepath+=$HOME/.vim
endif

""-------------------------------------------------------------------------------
"" dein.vim
""-------------------------------------------------------------------------------

filetype off

if !&compatible
  set nocompatible
endif

let s:dein_dir = "$HOME/.vim/dein"
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
if &runtimepath !~# '/dein.vim'
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

call dein#begin(s:dein_dir)
" Check cache
if dein#load_state(expand('~/.vimrc'), expand('~/.vimrc.local'), expand('~/.vimrc.dein.local'))
  call dein#add('Shougo/dein.vim')

  call dein#add('Shougo/vimproc', {
        \   'build': {
        \     'windows': 'tools\\update-dll-mingw',
        \     'cygwin': 'make -f make_cygwin.mak',
        \     'mac': 'make -f make_mac.mak',
        \     'linux': 'make',
        \     'unix': 'gmake'
        \   }
        \ })

  call dein#add('Shougo/unite.vim', {
        \   'depends': ['vimproc'],
        \   'on_cmd': ['Unite'],
        \   'lazy': 1
        \ })
  call dein#add('Shougo/neomru.vim', {
        \   'on_source': ['unite.vim'],
        \   'on_cmd': ['Unite'],
        \   'lazy': 1
        \ })

  call dein#add('Shougo/vimshell')

  if has('lua')
    call dein#add('Shougo/neocomplete.vim', {
          \   'on_i': 1,
          \   'lazy': 1
          \ })
    call dein#add('Shougo/neosnippet', {
          \   'on_i': 1,
          \   'lazy': 1
          \ })
    call dein#add('Shougo/neosnippet-snippets', {
          \   'on_i': 1,
          \   'lazy': 1
          \ })
  endif

  if executable('ag')
    call dein#add('rking/ag.vim')
  endif

  """ Vim as your IDE [http://haridas.in/vim-as-your-ide.html]
  call dein#add('fholgado/minibufexpl.vim')
  call dein#add('majutsushi/tagbar')
  call dein#add('scrooloose/nerdcommenter')
  call dein#add('scrooloose/nerdtree')

  "" colorscheme
  call dein#add('altercation/vim-colors-solarized')

  call dein#add('editorconfig/editorconfig-vim')

  call dein#add('osyo-manga/vim-over')

  call dein#add('haya14busa/incsearch.vim')

  call SourceIfExist($HOME."/.vimrc.dein.local")

endif

call dein#end()
call dein#save_state()

" Installation check.
if dein#check_install()
  call dein#install()
endif

filetype plugin indent on


""-------------------------------------------------------------------------------
"" nerdtree.vim
""-------------------------------------------------------------------------------

if dein#tap('nerdtree')
  nnoremap <C-n> :NERDTreeToggle<CR>
endif


""-------------------------------------------------------------------------------
"" minibufexpl.vim
""-------------------------------------------------------------------------------

if dein#tap('minibufexpl.vim')
  let g:miniBufExplMapWindowNavVim = 1
  let g:miniBufExplMapWindowNavArrows = 1
  let g:miniBufExplMapCTabSwitchBufs = 1
  let g:miniBufExplModSelTarget = 1
endif


""-------------------------------------------------------------------------------
"" tagbar.vim
""-------------------------------------------------------------------------------

if dein#tap('tagbar')
  nmap <leader>l <ESC>:TagbarToggle<CR>
  imap <leader>l <ESC>:TagbarToggle<CR>i
endif


""-------------------------------------------------------------------------------
"" neocomplete.vim {{{2
""-------------------------------------------------------------------------------

if dein#tap('neocomplete.vim')
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
        \   'default' : '',
        \   'vimshell' : $HOME.'/.vimshell_hist',
        \   'scheme' : $HOME.'/.gosh_completions'
        \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return neocomplete#smart_close_popup() . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><C-y>  neocomplete#close_popup()
  inoremap <expr><C-e>  neocomplete#cancel_popup()
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

  " For cursor moving in insert mode(Not recommended)
  "inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
  "inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
  "inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
  "inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
  " Or set this.
  "let g:neocomplete#enable_cursor_hold_i = 1
  " Or set this.
  "let g:neocomplete#enable_insert_char_pre = 1

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior(not recommended).
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
endif


""--------------------------------------------------------------------------------
"" neosnippet
""--------------------------------------------------------------------------------

if dein#tap('neosnippet')
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

  "let g:neosnippet#snippets_directory='$HOME/.vim/bundle/neosnippet/autoload/neosnippet/snippets,$HOME/.vim/snippets'
  let g:neosnippet#snippets_directory='$HOME/.vim/snippets'
endif


""-------------------------------------------------------------------------------
"" unite.vim
""-------------------------------------------------------------------------------

if dein#tap('unite.vim')
  if executable('ag')
    let g:unite_source_rec_async_command = 'ag --nocolor --nogroup --hidden -g ""'
  endif
  nnoremap <leader>h :<C-u>Unite -start-insert file_mru<CR>
  nnoremap <leader>f :<C-u>Unite -start-insert file_rec/async:!<CR>
  nnoremap <leader>F :<C-u>Unite -start-insert file_rec<CR>
endif


""-------------------------------------------------------------------------------
"" over.vim
""-------------------------------------------------------------------------------

if dein#tap('vim-over')
  nnoremap <silent> <Leader>m :OverCommandLine<CR>
  nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
  nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
endif


""-------------------------------------------------------------------------------
" incsearch.vim
""-------------------------------------------------------------------------------

if dein#tap('incserach.vim')
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
endif


""-------------------------------------------------------------------------------
"" vim-colors-solarized
""-------------------------------------------------------------------------------

if dein#tap('vim-colors-solarized')
  colorscheme solarized
endif


"================================================================================
" FILETYPE SETTINGS:
"================================================================================

autocmd FileType perl   setl ts=4 sts=4 sw=4 ff=unix
autocmd FileType ruby   setl ff=unix
autocmd FileType python setl ts=4 sts=4 sw=4 ff=unix
""" TODO: windows g?vimrc encoding=cp932


"================================================================================
" SYNTAX HIGHLIGHTING:
"================================================================================

let g:markdown_fenced_languages = [
      \  'coffee',
      \  'css',
      \  'erb=eruby',
      \  'javascript',
      \  'js=javascript',
      \  'json=javascript',
      \  'ruby',
      \  'sass',
      \  'xml',
      \  'sh',
      \]


"================================================================================
" LOCAL SETTINGS:
"================================================================================

if has('mac')
  call SourceIfExist($HOME."/.vimrc.mac")
elseif has('unix')
  call SourceIfExist($HOME.'/.vimrc.linux')
elseif has('win32') || has('win64')
  call SourceIfExist($HOME.'/.vimrc.win')
endif

call SourceIfExist($HOME.'/.vimrc.local')
